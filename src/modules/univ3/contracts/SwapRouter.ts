/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace ISwapRouter {
  export type ExactInputSingleParamsStruct = {
    tokenIn: string;
    tokenOut: string;
    fee: BigNumberish;
    recipient: string;
    deadline: BigNumberish;
    amountIn: BigNumberish;
    amountOutMinimum: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type ExactInputSingleParamsStructOutput = [
    string,
    string,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: number;
    recipient: string;
    deadline: BigNumber;
    amountIn: BigNumber;
    amountOutMinimum: BigNumber;
    sqrtPriceLimitX96: BigNumber;
  };

  export type ExactOutputSingleParamsStruct = {
    tokenIn: string;
    tokenOut: string;
    fee: BigNumberish;
    recipient: string;
    deadline: BigNumberish;
    amountOut: BigNumberish;
    amountInMaximum: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type ExactOutputSingleParamsStructOutput = [
    string,
    string,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: number;
    recipient: string;
    deadline: BigNumber;
    amountOut: BigNumber;
    amountInMaximum: BigNumber;
    sqrtPriceLimitX96: BigNumber;
  };

  export type ExactInputParamsStruct = {
    path: BytesLike;
    recipient: string;
    deadline: BigNumberish;
    amountIn: BigNumberish;
    amountOutMinimum: BigNumberish;
  };

  export type ExactInputParamsStructOutput = [string, string, BigNumber, BigNumber, BigNumber] & {
    path: string;
    recipient: string;
    deadline: BigNumber;
    amountIn: BigNumber;
    amountOutMinimum: BigNumber;
  };

  export type ExactOutputParamsStruct = {
    path: BytesLike;
    recipient: string;
    deadline: BigNumberish;
    amountOut: BigNumberish;
    amountInMaximum: BigNumberish;
  };

  export type ExactOutputParamsStructOutput = [string, string, BigNumber, BigNumber, BigNumber] & {
    path: string;
    recipient: string;
    deadline: BigNumber;
    amountOut: BigNumber;
    amountInMaximum: BigNumber;
  };
}

export interface SwapRouterInterface extends utils.Interface {
  functions: {
    'exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))': FunctionFragment;
    'exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))': FunctionFragment;
    'exactInput((bytes,address,uint256,uint256,uint256))': FunctionFragment;
    'exactOutput((bytes,address,uint256,uint256,uint256))': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: 'exactInputSingle' | 'exactOutputSingle' | 'exactInput' | 'exactOutput'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'exactInputSingle', values: [ISwapRouter.ExactInputSingleParamsStruct]): string;
  encodeFunctionData(
    functionFragment: 'exactOutputSingle',
    values: [ISwapRouter.ExactOutputSingleParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: 'exactInput', values: [ISwapRouter.ExactInputParamsStruct]): string;
  encodeFunctionData(functionFragment: 'exactOutput', values: [ISwapRouter.ExactOutputParamsStruct]): string;

  decodeFunctionResult(functionFragment: 'exactInputSingle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exactOutputSingle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exactInput', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exactOutput', data: BytesLike): Result;

  events: {};
}

export interface SwapRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwapRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    exactInputSingle(
      params: ISwapRouter.ExactInputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    exactOutputSingle(
      params: ISwapRouter.ExactOutputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    exactInput(
      params: ISwapRouter.ExactInputParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    exactOutput(
      params: ISwapRouter.ExactOutputParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  exactInputSingle(
    params: ISwapRouter.ExactInputSingleParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  exactOutputSingle(
    params: ISwapRouter.ExactOutputSingleParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  exactInput(
    params: ISwapRouter.ExactInputParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  exactOutput(
    params: ISwapRouter.ExactOutputParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    exactInputSingle(params: ISwapRouter.ExactInputSingleParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;

    exactOutputSingle(params: ISwapRouter.ExactOutputSingleParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;

    exactInput(params: ISwapRouter.ExactInputParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;

    exactOutput(params: ISwapRouter.ExactOutputParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    exactInputSingle(
      params: ISwapRouter.ExactInputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    exactOutputSingle(
      params: ISwapRouter.ExactOutputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    exactInput(
      params: ISwapRouter.ExactInputParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    exactOutput(
      params: ISwapRouter.ExactOutputParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exactInputSingle(
      params: ISwapRouter.ExactInputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exactOutputSingle(
      params: ISwapRouter.ExactOutputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exactInput(
      params: ISwapRouter.ExactInputParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    exactOutput(
      params: ISwapRouter.ExactOutputParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
